#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const CONFIG_FILE = path.join(__dirname, '..', '.env');
const EXAMPLE_FILE = path.join(__dirname, '..', '.env.example');

// ANSI color codes for better CLI experience
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function colorize(text, color) {
  return `${colors[color]}${text}${colors.reset}`;
}

function createReadlineInterface() {
  return readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
}

function question(rl, prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function promptForApiKey(rl) {
  console.log(colorize('\nüìã Perplexity AI API Key Setup', 'cyan'));
  console.log('You need a Perplexity AI API key to use this skill.');
  console.log(colorize('Get your API key from: https://www.perplexity.ai/settings/api', 'blue'));
  
  let apiKey = '';
  while (!apiKey) {
    apiKey = await question(rl, '\nüîë Enter your Perplexity API key: ');
    if (!apiKey) {
      console.log(colorize('‚ùå API key cannot be empty. Please try again.', 'red'));
    }
  }
  
  return apiKey;
}

async function promptForPort(rl) {
  const defaultPort = '3000';
  const port = await question(rl, `\nüåê Local development server port (default: ${defaultPort}): `);
  return port || defaultPort;
}

function createEnvFile(config) {
  const envContent = `# Environment variables for Perplexity Alexa Skill
# This file is automatically generated and should not be committed to git

# Perplexity AI API Key (required)
PERPLEXITY_API_KEY=${config.apiKey}

# Local development server port
PORT=${config.port}

# Node environment
NODE_ENV=development

# Generated on: ${new Date().toISOString()}
`;

  fs.writeFileSync(CONFIG_FILE, envContent);
}

function checkExistingConfig() {
  if (fs.existsSync(CONFIG_FILE)) {
    const envContent = fs.readFileSync(CONFIG_FILE, 'utf8');
    const hasApiKey = envContent.includes('PERPLEXITY_API_KEY=') && 
                     !envContent.includes('PERPLEXITY_API_KEY=your-perplexity-api-key-here');
    return hasApiKey;
  }
  return false;
}

async function confirmOverwrite(rl) {
  const answer = await question(rl, 
    colorize('\n‚ö†Ô∏è  Configuration already exists. Overwrite? (y/N): ', 'yellow')
  );
  return answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes';
}

function validateApiKey(apiKey) {
  // Basic validation for Perplexity API key format
  if (apiKey.length < 20) {
    console.log(colorize('‚ö†Ô∏è  Warning: API key seems too short. Please verify it\'s correct.', 'yellow'));
  }
  
  if (!apiKey.startsWith('pplx-')) {
    console.log(colorize('‚ö†Ô∏è  Warning: Expected Perplexity API key to start with "pplx-"', 'yellow'));
  }
}

async function testApiKey(apiKey) {
  console.log(colorize('\nüß™ Testing API key...', 'cyan'));
  
  try {
    const axios = require('axios');
    
    const response = await axios.post('https://api.perplexity.ai/chat/completions', {
      model: 'llama-3.1-sonar-small-128k-online',
      messages: [{
        role: 'user',
        content: 'Hello, this is a test.'
      }],
      max_tokens: 10,
      temperature: 0.1
    }, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    if (response.status === 200) {
      console.log(colorize('‚úÖ API key is valid and working!', 'green'));
      return true;
    }
  } catch (error) {
    if (error.response) {
      if (error.response.status === 401) {
        console.log(colorize('‚ùå API key is invalid or expired.', 'red'));
      } else if (error.response.status === 429) {
        console.log(colorize('‚ö†Ô∏è  API key is valid but rate limited. This is normal.', 'yellow'));
        return true;
      } else {
        console.log(colorize(`‚ö†Ô∏è  API responded with status ${error.response.status}. Key might still be valid.`, 'yellow'));
      }
    } else if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
      console.log(colorize('‚ö†Ô∏è  Could not connect to Perplexity API. Check your internet connection.', 'yellow'));
      console.log(colorize('    API key will be saved anyway.', 'yellow'));
      return true;
    } else {
      console.log(colorize(`‚ö†Ô∏è  Error testing API key: ${error.message}`, 'yellow'));
      console.log(colorize('    API key will be saved anyway.', 'yellow'));
      return true;
    }
  }
  
  return false;
}

async function main() {
  console.log(colorize('üöÄ Perplexity Alexa Skill Configuration Setup', 'bright'));
  console.log(colorize('=====================================', 'bright'));
  
  const rl = createReadlineInterface();
  
  try {
    // Check if configuration already exists
    if (checkExistingConfig()) {
      const shouldOverwrite = await confirmOverwrite(rl);
      if (!shouldOverwrite) {
        console.log(colorize('\n‚úÖ Configuration setup cancelled.', 'green'));
        process.exit(0);
      }
    }
    
    // Collect configuration
    const config = {
      apiKey: await promptForApiKey(rl),
      port: await promptForPort(rl)
    };
    
    // Validate API key format
    validateApiKey(config.apiKey);
    
    // Test API key if axios is available
    try {
      require('axios');
      const keyValid = await testApiKey(config.apiKey);
      if (!keyValid) {
        const continueAnyway = await question(rl, 
          colorize('\n‚ùì Continue with potentially invalid API key? (y/N): ', 'yellow')
        );
        if (continueAnyway.toLowerCase() !== 'y' && continueAnyway.toLowerCase() !== 'yes') {
          console.log(colorize('Configuration cancelled.', 'yellow'));
          process.exit(1);
        }
      }
    } catch (e) {
      console.log(colorize('\n‚ö†Ô∏è  Cannot test API key (axios not installed). Proceeding anyway.', 'yellow'));
    }
    
    // Create .env file
    createEnvFile(config);
    
    console.log(colorize('\n‚úÖ Configuration saved successfully!', 'green'));
    console.log(colorize(`üìÅ Configuration file: ${CONFIG_FILE}`, 'blue'));
    console.log(colorize('\nüöÄ Next steps:', 'cyan'));
    console.log('   1. Run: npm run dev:start');
    console.log('   2. Test: npm run dev:test');
    console.log('   3. Deploy: npm run cdk:deploy');
    
    console.log(colorize('\nüîí Security Note:', 'magenta'));
    console.log('   - Your API key is stored locally in .env');
    console.log('   - This file is excluded from git');
    console.log('   - For production, use AWS Secrets Manager');
    
  } catch (error) {
    console.error(colorize(`\n‚ùå Error: ${error.message}`, 'red'));
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
  console.log(colorize('\n\nüëã Configuration cancelled.', 'yellow'));
  process.exit(0);
});

main();